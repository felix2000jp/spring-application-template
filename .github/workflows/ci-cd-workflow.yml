name: CI CD Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  APPLICATION_NAME: spring-application-template
  GITHUB_SHA: ${{ github.event.pull_request.head.sha || github.sha }}

jobs:
  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup temurin JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: maven
      - name: Verify and package application
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B clean verify -Pcoverage org.sonarsource.scanner.maven:sonar-maven-plugin:sonar
      - name: Upload JAR file artifact
        uses: actions/upload-artifact@v4
        with:
          path: target/*.jar
          name: ${{ env.APPLICATION_NAME }}
          if-no-files-found: error
  build-and-push:
    name: Build and Push Image
    needs: [ build-and-test ]
    runs-on: ubuntu-latest
    steps:
      - name: Download JAR file artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.APPLICATION_NAME }}
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to docker hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Generate metadata
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.APPLICATION_NAME }}
          tags: type=raw,value=${{ env.GITHUB_SHA }}
        id: docker_meta
      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          outputs: type=docker,dest=${{ env.GITHUB_SHA }}.tar
          build-args: JAR_FILE=*.jar
      - name: Upload docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.GITHUB_SHA }}
          path: ${{ env.GITHUB_SHA }}.tar
          if-no-files-found: error
  run-trivy-scan:
    name: Trivy scan the image
    needs: [ build-and-push ]
    runs-on: ubuntu-latest
    steps:
      - name: Download docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.GITHUB_SHA }}
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.GITHUB_SHA }}
          format: sarif
          output: trivy-results.sarif
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif
          exit-code: 1
          format: table
          severity: 'MEDIUM,HIGH,CRITICAL'
  deploy-image:
    name: Deploy Application
    needs: [ run-trivy-scan ]
    runs-on: ubuntu-latest
    steps:
      - name: Setup deploy env
        run: echo "Use this step to deploy your app if needed"